import re

from Bio import pairwise2
from Bio.SubsMat.MatrixInfo import blosum62

chickenGene = """ATGGAGCGGCCGAGCGGGGACATCATGCGGCGGAACCCGCAGCAGGACTACGAGCTGATC
CAGCGCGTGGGCAGCGGCACCTACGGCGACGTGTACAAGGCTAGAAATCTTCATACTGGA
GAACTGGCTGCTGTAAAAATAATCAAGTTAGAGCCTGGGGACGACTTTTCGTTGATCCAG
CAGGAAATATATATGGTAAAAGAATGCAAACATTGCAACATAGTCGCCTATTTTGGGAGC
TATCTCAGCCGTGAAAAGCTGTGGATATGCATGGAGTACTGCGGTGGGGGATCCCTCCAA
GATATCTACCATGTAACGGGACCTCTGTCAGAGCTACAAATTGCATATGTTTGCAGAGAG
ACTTTGCAGGGTCTCGCTTATTTGCATATGAAGGGCAAAATGCACAGAGACATAAAGGGT
GCAAATATTCTACTAACAGACCATGGAGATGTCAAGTTAGCTGACTTCGGTGTAGCAGCA
AAAATAACAGCCACCATTGCAAAGAGGAAATCATTTATCGGTACCCCTTACTGGATGGCC
CCAGAGGTTGCGGCGGTGGAGAAGAACGGCGGCTACAACCAGCTCTGTGACATCTGGGCG
GTCGGCATCACAGCCATCGAGCTGGCGGAGCTTCAGCCCCCCATGTTTGACCTGCACCCC
ATGAGGGCTTTGTTCTTAATGTCCAAAAGTAATTTTCAACCACCAAAGCTAAAGGAAAAA
GCGAAATGTATGAACAAAAAAATGCTTCATAGAATCCTAGAATGCTTTGTAGGGCAGCCT
GGCCTTTCACGATCTTTAGCAGTTGAGCTGTTGGACAAAGTTAATAATCCTGACAACCAC
ACACACTGCAGTGAAGTGGATGATGATGATTTTGAGCCTCATTCTGTTATTCGCCATACG
ATTCGTTCTACAAACAGGAATGTTAGGGCAGAAAGAACAGCATCAGAGATAAACTTTGAT
AAGCTCCAGTTTGAGCCCCCTCTGCGGAAAGAAACAGAAGCTCGGGATGAAATGGTTGTG
GCAGCTGGCACCGACTTTGCTTCGCATTGGAATCCTTTTGTTGAAGGTGGAAGCAGCAAT
TTAAAAACACCTCGGGTTTTGGAAAGGAATGGTATACTGATGGCAGTAGGTGTGGAAGAG
AACTATAATGATTCCTGGGGCAGGTCAACCCTAAAGCGAGCAGGGCCACCTCCACTACCT
CCTAAGCCAAGAATAAACAGTTACCCTGAGGAAAACCTCCCAGATGATGAGAAATCTGAG
ACGATAAAACACTTCCCTGACTCACAGAACAGAGCCCCACCAGCTCATAGGAGGCAGAGT
ATTCCTGTCTGTGGGCCTCAGACTGACTCTTCCCCCATTGGGAATGGGGACGGCATGTTG
AAACTCATTGAGGAAAATGCAGAAGGATCTGGACAAATCCCTCAGCTGCCACGTAAAAAA
GAGAAAAGAGATTTTCCTAAGCCAGCAATCAATGGTTTGCCACCAACGCCAAAGGTGCTG
ATGGGAGCGTGTTTCTCCAAAGTCTTCGATGGGTGCCCTTTGAAGATTAACTGTGCAACA
TCGTGGATTCATCCAGATACTAAAGATCAGTACATCATCTTTGGAACAGAAGAAGGTATC
TATACTTTGAATTTGAATGAGCTTCATGAAGCAACAATGGAACAGGTGATCTTGGGTAAT
TTTCTCTACATACATTTTCCTATCGTGCACGGCTCCCTGGTGGAGGCGCGGAAGACGTTC
CAGCTCTACTCCCACAATCTGATAGCTTTGTTTGAACAAGCCAAAAAAACAGGACTGGCT
GCTCACATCCAAACCCATCGGTTCCCTGACAGAATATTACCAAGGAAGTTTGCCTTAACA
ACAAAGATTCCTGACACAAAAGGGTGTCACAAATGCTGTATAGTAAGAAATCCATACACA
GGACACAAGTACCTCTGCGGTGCGTTGCAGTCTGGAATTGTTCTGCTACAGTGGTATGAG
CCAATGCAGAAATTCATGTTAATAAAGCACTTTGATTTTCCTTTGCCGAGCCCTCTGAAT
GTCTTTGAGATGCTGGTGATCCCAGAGCAGGAGTACCCGATGGTCTGCGTGGCTATCAGT
AAAGGCGCTGAGCCAAACCAGGTCGTTCACTTTGAGACAATCAACTTGAACTCTGCTTCC
TCGTGGTTTACAGAAATCGGTGCAGGCAATCAGCAGCTGGATGCCATTCATGTGACACAG
CTGGAAAGAGACACCGTGCTGGTCTGCCTGGACAAATTTGTGAAAATAGTGAATTTACAA
GGGAAACTGAAGTCAAGCAAGAAGTTGGCCTCGGAGCTGAGCTTTGATTTCTGCATTGAG
TCAGTGGTGTGCCTTCAGGACAGTGTGCTGGCCTTCTGGAAACATGGCATGCAGGGCAAG
AGCTTCAAGTCGGATGAAGTTACCCAGGAGATATCAGATGAAACGCGGGTTTTTCGCTTA
CTGGGCTCTGACAGAGTGGTGGTGCTGGAGAGCAGGCCGACGGAGAACCCAACTGCACAC
AGCAACCTCTACATCTTGGCTGGCCATGAAAACAGTTAC"""

humanGene = """ATGGAGGCCCCGCTGCGGCCTGCCGCGGACATCCTGAGGCGGAACCCGCAGCAGGACTAC
GAACTCGTCCAGAGGGTCGGCAGCGGCACCTACGGGGACGTCTATAAGGCCAGAAATGTA
CACACAGGAGAGCTGGCTGCAGTAAAAATCATTAAATTGGAGCCTGGAGATGATTTTTCT
TTGATTCAACAAGAAATATTTATGGTTAAAGAATGTAAACATTGTAACATCGTTGCCTAC
TTTGGGAGTTATCTTAGTCGGGAAAAACTATGGATTTGTATGGAATACTGTGGTGGCGGA
TCACTTCAAGATATTTACCATGTTACTGGACCATTATCAGAATTGCAAATAGCCTATGTA
TGCAGAGAAACCTTACAGGGTCTTGCCTATTTGCATACTAAAGGCAAAATGCATAGAGAT
ATCAAAGGTGCTAATATTTTATTGACAGACCATGGCGATGTAAAATTAGCTGACTTTGGT
GTGGCTGCAAAAATAACAGCTACCATTGCAAAACGAAAATCTTTCATTGGCACCCCTTAC
TGGATGGCCCCAGAAGTTGCAGCAGTAGAGAAGAATGGTGGCTACAACCAACTCTGTGAT
ATCTGGGCAGTAGGAATAACAGCAATTGAACTTGGAGAACTTCAGCCACCTATGTTTGAT
CTCCACCCAATGAGGGCTCTCTTCTTAATGTCAAAAAGTAATTTTCAGCCTCCAAAACTA
AAGGACAAAACAAAATGGTCATCAACATTCCATAATTTTGTCAAAATAGCACTAACCAAA
AACCCAAAAAAAAGACCAACTGCTGAAAGACTTCTGACTCACACTTTTGTTGCACAGCCA
GGTCTCTCTAGAGCCCTAGCAGTTGAACTGTTAGACAAAGTGAACAATCCAGATAACCAC
GCACATTACACTGAAGCAGATGACGATGACTTTGAGCCCCATGCAATCATTCGTCATACC
ATTAGATCTACAAACAGGAATGCCAGAGCTGAACGGACAGCTTCAGAAATAAATTTTGAC
AAATTACAATTTGAACCTCCTCTGAGAAAAGAAACAGAAGCACGAGATGAAATGGGATTG
TCATCAGACCCAAATTTCATGTTACAGTGGAATCCTTTTGTTGATGGTGCAAATACTGGC
AAATCAACCTCAAAACGTGCAATACCACCTCCCCTACCTCCTAAGCCAAGGATAAGCAGT
TACCCTGAAGACAACTTTCCGGATGAAGAAAAAGCATCAACCATAAAACATTGTCCTGAT
TCAGAAAGCAGAGCTCCCCAAATTCTCAGAAGACAGAGTAGCCCAAGTTGTGGGCCTGTG
GCAGAGACTTCTTCTATTGGAAATGGTGATGGTATTTCAAAACTGATGAGTGAAAATACA
GAAGGATCAGCACAAGCACCACAGTTACCACGAAAAAAGGACAAACGAGACTTCCCTAAA
CCAGCCATCAATGGCCTTCCACCCACCCCAAAAGTTCTGATGGGAGCATGCTTTTCAAAA
GTTTTTGATGGCTGTCCTTTGAAAATTAATTGTGCAACATCCTGGATACATCCTGATACA
AAAGATCAGTACATTATTTTTGGAACTGAAGATGGTATTTACACACTGAATCTCAATGAG
CTACATGAGGCAACGATGGAACAGTTATTTCCACGGAAGTGTACTTGGCTGTATGTTATC
AATAATACTTTAATGTCATTATCAGTAGGAAAAACCTTTCAGCTCTACTCTCACAATCTT
ATAGCTTTGTTTGAACATGCCAAAAAACCAGGATTAGCTGCCCATATTCAAACTCACAGG
TTTCCAGACCGAATACTACCAAGAAAATTCGCTTTAACAACAAAGATTCCTGATACAAAA
GGCTGCCACAAATGTTGCATAGTCAGAAACCCTTACACGGGACATAAATACCTCTGTGGA
GCTTTACAGTCTGGAATTGTTTTACTTCAGTGGTATGAGCCAATGCAGAAATTCATGTTG
ATAAAGCACTTTGATTTTCCTTTGCCAAGTCCTTTGAATGTTTTTGAAATGCTGGTGATA
CCTGAACAGGAATACCCTATGGTCTGTGTAGCTATTAGCAAAGGCACTGAATCGAATCAG
GTAGTTCAGTTTGAGACAATCAATTTGAACTCTGCATCTTCATGGTTTACAGAAATTGGT
GCAGGCAGCCAGCAGTTAGATTCCATTCATGTAACACAGTTGGAGAGAGATACCGTTTTA
GTGTGTTTAGACAAATTTGTGAAAATTGTAAATCTACAAGGAAAATTAAAATCAAGTAAG
AAACTGGCCTCTGAGTTAAGTTTTGATTTTCGCATTGAATCTGTAGTATGCCTTCAAGAC
AGTGTGTTGGCTTTCTGGAAACATGGGATGCAGGGTAAAAGCTTCAAGTCAGATGAGGTT
ACCCAGGAGATTTCAGATGAAACAAGAGTTTTCCGCTTATTAGGATCAGACAGGGTTGTC
GTTTTGGAAAGTAGGCCAACAGAAAATCCTACTGCACACAGCAATCTCTACATCTTGGCT
GGACATGAAAATAGTTAC"""

aa = { 'TTT': 'F', 'TTC': 'F', 'TTA': 'L', 'TTG': 'L', 'TCT': 'S', 
'TCC': 'S', 'TCA': 'S', 'TCG': 'S', 'TAT': 'Y', 'TAC': 'Y', 
'TGT': 'C', 'TGC': 'C', 'TGG': 'W', 'CTT': 'L', 'CTC': 'L', 
'CTA': 'L', 'CTG': 'L', 'CCT': 'P', 'CCC': 'P', 'CCA': 'P', 
'CCG': 'P', 'CAT': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q', 
'CGT': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R', 'ATT': 'I', 
'ATC': 'I', 'ATA': 'I', 'ATG': 'M', 'ACT': 'T', 'ACC': 'T', 
'ACA': 'T', 'ACG': 'T', 'AAT': 'N', 'AAC': 'N', 'AAA': 'K', 
'AAG': 'K', 'AGT': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R', 
'GTT': 'V', 'GTC': 'V', 'GTA': 'V', 'GTG': 'V', 'GCT': 'A', 
'GCC': 'A', 'GCA': 'A', 'GCG': 'A', 'GAT': 'D', 'GAC': 'D', 
'GAA': 'E', 'GAG': 'E', 'GGT': 'G', 'GGC': 'G', 'GGA': 'G', 
'GGG': 'G', "TAA":"stop", "TGA":"stop", "TAG":"stop"}

humanGene = re.sub("\n", "", humanGene)
chickenGene = re.sub("\n", "", chickenGene)
if len(humanGene) == len(chickenGene):
	print("same length")
else:
	print("length difference")

humanCodons = list()
chickenCodons = list()


for i in range(0, len(humanGene), 3):
	codon = humanGene[i:i+3]
	humanCodons.append(codon)

for i in range(0, len(chickenGene), 3):
	codon = chickenGene[i:i+3]
	chickenCodons.append(codon)

aaSeqHuman = ""
aaSeqChicken = ""

sameCodon = list()

for codon in chickenCodons:
	aaSeqChicken += aa[codon]

for i, codon in enumerate(humanCodons):
	aaSeqHuman += aa[codon]


alignments = pairwise2.align.globalds(aaSeqHuman, aaSeqChicken, blosum62, -10, -0.5)
alignHuman = alignments[0][0]
alignChicken = alignments[0][1]

# print()

same = 0
codonCountsHuman = dict()
codonCountsChicken = dict()

# print(alignments[0][0])
# print(alignments[0][1])



gaps = list()

for i, aa in enumerate(alignHuman):
	if aa == "-":
		gaps.append(i)
for i, aa in enumerate(alignChicken):
	if aa == "-":
		gaps.append(i)


alignHumanNoGaps = "".join([char for idx, char in enumerate(alignHuman) if idx not in gaps])
alignChickenNoGaps = "".join([char for idx, char in enumerate(alignChicken) if idx not in gaps])


for i, amino in enumerate(alignHumanNoGaps):
	if amino == alignChickenNoGaps[i]:
		sameCodon.append(i)
		if humanCodons[i] in codonCountsHuman:
			codonCountsHuman[humanCodons[i]] += 1
		else:
			codonCountsHuman[humanCodons[i]] = 1
		if chickenCodons[i] in codonCountsChicken:
			codonCountsChicken[chickenCodons[i]] += 1
		else:
			codonCountsChicken[chickenCodons[i]] = 1

print(codonCountsChicken)
print(codonCountsHuman)

for codon in codonCountsChicken:
		

